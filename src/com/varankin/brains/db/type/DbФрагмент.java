package com.varankin.brains.db.type;

import com.varankin.brains.db.DbОператор;
import com.varankin.brains.db.Коммутируемый;
import com.varankin.brains.db.Параметризованный;
import com.varankin.brains.db.Типовой;

/**
 * Фрагмент повторно используемой мыслительной структуры.
 * Экземплярами такой структуры могут быть классы, реализующие
 * {@link DbФрагмент.Экземпляр}.
 *
 * @author &copy; 2021 Николай Варанкин
 */
public interface DbФрагмент extends Типовой<DbФрагмент.Экземпляр>, 
        Параметризованный, Коммутируемый, DbЭлемент
{

    /**
     * Экземпляр фрагмента. Известные варианты:
     * {@link DbМодуль}, {@link DbРасчет}, {@link DbЛента} или {@link DbПоле}.
     */
    interface Экземпляр extends Коммутируемый, DbЭлемент {};
    
    /**
     * @return название процессора расчета когнитивных функций.
     */
    String процессор();
    
    /**
     * @param значение название процессора расчета когнитивных функций.
     */
    void процессор( String значение );

    @Override
    default <X> X выполнить( DbОператор<X> оператор, DbАтрибутный узел )
    {
        X результат;
        if( узел instanceof DbСоединение )
            результат = оператор.выполнить( (DbСоединение)узел, соединения() );
        else if( узел instanceof DbПараметр )
            результат = оператор.выполнить( (DbПараметр)узел, параметры() );
        else 
            результат = DbЭлемент.super.выполнить( оператор, узел );
        return результат;
    }
    
}
