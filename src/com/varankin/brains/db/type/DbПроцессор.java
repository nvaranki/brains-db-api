package com.varankin.brains.db.type;

import com.varankin.brains.db.DbОператор;
import com.varankin.brains.db.Внешний;
import com.varankin.brains.db.Параметризованный;
import com.varankin.brains.db.Типовой;

/**
 * Активный элемент мыслительной структуры. 
 * Выполняет опрос "засветившихся" датчиков, что, в результате,
 * приводит к расчету когнитивной функции и генерации сигналов.
 *
 * @author &copy; 2021 Николай Варанкин
 */
public interface DbПроцессор extends Параметризованный, Внешний, Типовой<DbПроцессор>, DbЭлемент
{

    /**
     * @return задержка обработки датчика после выборки из очереди, в нс.
     */
    Long задержка();
    
    /**
     * @param значение  задержка обработки датчика после выборки из очереди, в нс.
     */
    void задержка( Long значение );
    
    /**
     * @return минимальное количество датчиков в очереди для начала обработки.
     */
    Integer накопление();
    
    /**
     * @param значение минимальное количество датчиков в очереди для начала обработки.
     */
    void накопление( Integer значение );
    
    /**
     * @return время в мс в неактивном состоянии, по истечении которого 
     * процессор завершает нить, если предусмотрен рестарт.
     */
    Long пауза();
    
    /**
     * Устанавливает время в мс в неактивном состоянии, по истечении которого 
     * процессор завершает нить, если предусмотрен рестарт.
     * 
     * @param значение новое значение.
     */
    void пауза( Long значение );
    
    /**
     * @return {@code true}, если процессор завершает нить в неактивном 
     * состоянии и автоматически начинает новую нить при необходимости.
     */
    Boolean рестарт();
    
    /**
     * Устанавливает признак завершения нити процессора в неактивном 
     * состоянии.
     * 
     * @param значение {@code true}, если процессор завершает нить в неактивном 
     * состоянии.
     */
    void рестарт( Boolean значение );

    /**
     * @return {@code true}, если идентичные датчики удаляются из очереди процессора.
     */
    Boolean сжатие();
    
    /**
     * Устанавливает признак удаления повторяющихся идентичных датчиков из начала очереди процессора.
     * 
     * @param значение {@code true}, если идентичные датчики должны удаляться из очереди.
     */
    void сжатие( Boolean значение );
    
    /**
     * @return {@code true}, если повторяющиеся идентичные датчики удаляются из начала очереди процессора.
     */
    Boolean очистка();
    
    /**
     * Устанавливает признак удаления идентичных датчиков из очереди процессора.
     * 
     * @param значение {@code true}, если идентичные датчики должны удаляться из очереди.
     */
    void очистка( Boolean значение );

    /**
     * @return стратегия реакции на возмущение в структуре когнитивной функции.
     */
    Стратегия стратегия();
    
    /**
     * Устанавливает стратегию реакции на возмущение в структуре когнитивной функции.
     * 
     * @param значение устанавливаемая стратегия.
     */
    void стратегия( Стратегия значение );


    /**
     * Стратегия реакции на возмущение в структуре когнитивной функции.
     */
    public enum Стратегия
    {
        /**
         * Стратегия наибыстрейшей реакции на возмущение.
         * Обработка датчика немедленно продолжается для 
         * следующего датчика цепочки.
         */
        БЫСТРЫЙ_ОТКЛИК,
        
        /**
         * Стратегия взвешенной реакции на возмущение.
         * После завершения обработки датчика, следующий датчик 
         * цепочки помещается в очередь.
         */
        НАКОПЛЕНИЕ_ВОЗМУЩЕНИЙ
    }

    @Override
    default <X> X выполнить( DbОператор<X> оператор, DbАтрибутный узел )
    {
        X результат;
        if( узел instanceof DbКлассJava )
            результат = оператор.выполнить( (DbКлассJava)узел, классы() );
        else if( узел instanceof DbПараметр )
            результат = оператор.выполнить( (DbПараметр)узел, параметры() );
        else 
            результат = DbЭлемент.super.выполнить( оператор, узел );
        return результат;
    }
    
}
